'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import styles from './OnboardingModal.module.css';

interface OnboardingModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export const OnboardingModal: React.FC<OnboardingModalProps> = ({ isOpen, onClose }) => {
  const router = useRouter();
  const [currentStep, setCurrentStep] = useState(0);

  const steps = [
    {
      title: 'Driving EnglishÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§! üéâ',
      content: 'Ïö¥Ï†ÑÌïòÎ©¥ÏÑú ÏòÅÏñ¥ Îâ¥Ïä§Î•º Îì§ÏúºÎ©∞ ÏûêÏó∞Ïä§ÎüΩÍ≤å ÏòÅÏñ¥ Ïã§Î†•ÏùÑ Ìñ•ÏÉÅÏãúÌÇ§ÏÑ∏Ïöî.',
      image: 'üöó',
      action: null
    },
    {
      title: 'Í∞úÏù∏ÌôîÎêú Îâ¥Ïä§ Ï∂îÏ≤ú üì∞',
      content: 'Í¥ÄÏã¨ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÑ†ÌÉùÌïòÎ©¥ AIÍ∞Ä ÎßûÏ∂§Ìòï Îâ¥Ïä§Î•º Ï∂îÏ≤úÌï¥ÎìúÎ¶ΩÎãàÎã§.',
      image: 'üéØ',
      highlights: [
        'ÏùåÏÑ± Í≤ÄÏÉâ Ïãú Í¥ÄÎ†® Îâ¥Ïä§ Ïö∞ÏÑ† ÌëúÏãú',
        'ÏÑ†ÌÉùÌïú Î∂ÑÏïºÏùò Í≥†ÌíàÏßà RSS ÌîºÎìú Ï∂îÏ≤ú',
        'Ï†ÑÎ¨∏ Ïö©Ïñ¥ÏôÄ ÌëúÌòÑ ÏßëÏ§ë ÌïôÏäµ'
      ]
    },
    {
      title: 'ÏùåÏÑ±ÏúºÎ°ú Ìé∏Î¶¨ÌïòÍ≤å üé§',
      content: 'Ïö¥Ï†Ñ Ï§ëÏóêÎèÑ ÏïàÏ†ÑÌïòÍ≤å ÏùåÏÑ± Î™ÖÎ†πÏúºÎ°ú Îâ¥Ïä§Î•º Í≤ÄÏÉâÌïòÍ≥† Îì§ÏùÑ Ïàò ÏûàÏäµÎãàÎã§.',
      image: 'üó£Ô∏è',
      action: {
        text: 'Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉùÌïòÎü¨ Í∞ÄÍ∏∞',
        onClick: () => {
          onClose();
          router.push('/settings?tab=categories');
        }
      }
    }
  ];

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrev = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSkip = () => {
    localStorage.setItem('onboardingCompleted', 'true');
    onClose();
  };

  if (!isOpen) return null;

  const step = steps[currentStep];

  return (
    <div className={styles.overlay}>
      <div className={styles.modal}>
        <button className={styles.skipButton} onClick={handleSkip}>
          Í±¥ÎÑàÎõ∞Í∏∞
        </button>

        <div className={styles.content}>
          <div className={styles.image}>{step.image}</div>
          <h2 className={styles.title}>{step.title}</h2>
          <p className={styles.description}>{step.content}</p>
          
          {step.highlights && (
            <ul className={styles.highlights}>
              {step.highlights.map((highlight, index) => (
                <li key={index}>{highlight}</li>
              ))}
            </ul>
          )}
        </div>

        <div className={styles.dots}>
          {steps.map((_, index) => (
            <span
              key={index}
              className={`${styles.dot} ${index === currentStep ? styles.active : ''}`}
            />
          ))}
        </div>

        <div className={styles.actions}>
          {currentStep > 0 && (
            <button className={styles.prevButton} onClick={handlePrev}>
              Ïù¥Ï†Ñ
            </button>
          )}
          
          {currentStep < steps.length - 1 ? (
            <button className={styles.nextButton} onClick={handleNext}>
              Îã§Ïùå
            </button>
          ) : (
            step.action && (
              <button className={styles.primaryButton} onClick={step.action.onClick}>
                {step.action.text}
              </button>
            )
          )}
        </div>
      </div>
    </div>
  );
};