generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NewsSource {
  id             String    @id @default(uuid())
  name           String    @unique
  type           String
  url            String
  category       String
  updateInterval Int
  lastFetch      DateTime?
  enabled        Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  articles       Article[]
}

model Article {
  id              String         @id @default(uuid())
  sourceId        String
  title           String
  titleKo         String?
  summary         String
  summaryKo       String?
  content         String
  url             String         @unique
  imageUrl        String?
  publishedAt     DateTime
  wordCount       Int
  readingTime     Int
  category        String
  tags            String[]
  isProcessed     Boolean        @default(false)
  processedAt     DateTime?
  processingError String?
  audioProcessed  Boolean        @default(false)
  audioProcessedAt DateTime?
  audioUrlEn      String?
  audioUrlKo      String?
  audioDuration   Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  source          NewsSource     @relation(fields: [sourceId], references: [id])
  sentences       Sentence[]
  userProgress    UserProgress[]

  @@index([publishedAt])
  @@index([category])
  @@index([isProcessed])
}

model Sentence {
  id          String   @id @default(uuid())
  articleId   String
  order       Int
  text        String
  translation String?
  audioUrlEn  String?
  audioUrlKo  String?
  wordCount   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([articleId, order])
  @@index([articleId])
}

model User {
  id             String           @id @default(uuid())
  email          String?          @unique
  name           String?
  deviceId       String           @unique
  dailyGoal      Int              @default(3)
  studyTime      Int              @default(0)
  lastActiveAt   DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  supabaseId     String?          @unique
  newsSearches   NewsSearch[]
  sessions       StudySession[]
  keywords       UserKeyword[]
  preferences    UserPreference[]
  progress       UserProgress[]
  rssFeeds       UserRssFeed[]
}

model UserProgress {
  id                 String    @id @default(uuid())
  userId             String
  articleId          String
  completedSentences Int[]
  isCompleted        Boolean   @default(false)
  startedAt          DateTime  @default(now())
  completedAt        DateTime?
  studyTime          Int       @default(0)
  article            Article   @relation(fields: [articleId], references: [id])
  user               User      @relation(fields: [userId], references: [id])

  @@unique([userId, articleId])
  @@index([userId])
  @@index([articleId])
}

model UserPreference {
  id     String @id @default(uuid())
  userId String
  key    String
  value  String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, key])
}

model StudySession {
  id            String    @id @default(uuid())
  userId        String
  startedAt     DateTime  @default(now())
  endedAt       DateTime?
  duration      Int?
  articlesRead  Int       @default(0)
  sentencesRead Int       @default(0)
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([startedAt])
}

model BackgroundJob {
  id           String    @id @default(uuid())
  type         String
  status       String
  payload      Json?
  error        String?
  attempts     Int       @default(0)
  maxAttempts  Int       @default(3)
  scheduledFor DateTime
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([type, status])
  @@index([scheduledFor])
}

model CacheEntry {
  id           String   @id @default(uuid())
  key          String   @unique
  type         String
  size         Int
  hits         Int      @default(0)
  lastAccessed DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  @@index([type])
  @@index([expiresAt])
}

model Cache {
  id         String   @id @default(uuid())
  key        String   @unique
  value      Json
  expires_at DateTime
  updated_at DateTime @updatedAt

  @@index([expires_at])
  @@map("cache")
}

model UserKeyword {
  id        String   @id @default(uuid())
  userId    String
  keyword   String
  weight    Float    @default(1.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, keyword])
  @@index([keyword])
}

model UserRssFeed {
  id        String   @id @default(uuid())
  userId    String
  name      String
  url       String
  category  String?
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, url])
}

model NewsSearch {
  id          String   @id @default(uuid())
  userId      String
  transcript  String
  keywords    String[]
  resultCount Int
  selectedId  String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}
