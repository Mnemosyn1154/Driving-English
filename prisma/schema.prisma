generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NewsSource {
  id             String    @id @default(uuid())
  name           String    @unique
  type           String
  url            String
  category       String
  updateInterval Int
  lastFetch      DateTime?
  enabled        Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  articles       Article[]
}

model Article {
  id                  String                  @id @default(uuid())
  sourceId            String
  title               String
  titleKo             String?
  summary             String
  summaryKo           String?
  content             String
  url                 String                  @unique
  imageUrl            String?
  publishedAt         DateTime
  wordCount           Int
  readingTime         Int
  category            String
  difficulty          Int?
  tags                String[]
  sentences           Json?
  isProcessed         Boolean                 @default(false)
  processedAt         DateTime?
  processingError     String?
  audioProcessed      Boolean                 @default(false)
  audioProcessedAt    DateTime?
  audioUrlEn          String?
  audioUrlKo          String?
  audioDuration       Int?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  source              NewsSource              @relation(fields: [sourceId], references: [id])
  sentenceModels      Sentence[]
  userProgress        UserProgress[]
  userArticleProgress UserArticleProgress[]

  @@index([publishedAt])
  @@index([category])
  @@index([isProcessed])
  @@index([difficulty])
}

model Sentence {
  id          String   @id @default(uuid())
  articleId   String
  order       Int
  text        String
  translation String?
  audioUrlEn  String?
  audioUrlKo  String?
  wordCount   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([articleId, order])
  @@index([articleId])
}

model User {
  id                   String                  @id @default(uuid())
  email                String?                 @unique
  name                 String?
  deviceId             String                  @unique
  dailyGoal            Int                     @default(3)
  studyTime            Int                     @default(0)
  lastActiveAt         DateTime?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  supabaseId           String?                 @unique
  newsSearches         NewsSearch[]
  sessions             StudySession[]
  keywords             UserKeyword[]
  preferences          UserPreference[]
  progress             UserProgress[]
  rssFeeds             UserRssFeed[]
  articleProgress      UserArticleProgress[]
  learningSessions     LearningSession[]
  dailyStats           DailyStats[]
  performanceReports   PerformanceReport[]
  analyticsEvents      AnalyticsEvent[]
  analyticsSessions    AnalyticsSession[]
}

model UserProgress {
  id                 String    @id @default(uuid())
  userId             String
  articleId          String
  completedSentences Int[]
  isCompleted        Boolean   @default(false)
  startedAt          DateTime  @default(now())
  completedAt        DateTime?
  studyTime          Int       @default(0)
  article            Article   @relation(fields: [articleId], references: [id])
  user               User      @relation(fields: [userId], references: [id])

  @@unique([userId, articleId])
  @@index([userId])
  @@index([articleId])
}

model UserArticleProgress {
  id                String    @id @default(uuid())
  userId            String
  articleId         String
  currentSentence   Int       @default(0)
  totalSentences    Int       @default(0)
  progressPercentage Float    @default(0)
  isCompleted       Boolean   @default(false)
  isBookmarked      Boolean   @default(false)
  lastReadAt        DateTime?
  readingTime       Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id])
  article           Article   @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId])
  @@index([userId])
  @@index([articleId])
  @@index([lastReadAt])
}

model LearningSession {
  id              String    @id @default(uuid())
  userId          String
  startTime       DateTime  @default(now())
  endTime         DateTime?
  durationMinutes Int       @default(0)
  articlesRead    Int       @default(0)
  sentencesRead   Int       @default(0)
  mode            String    @default("learn") // learn, driving
  deviceInfo      Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([startTime])
  @@index([mode])
}

model DailyStats {
  id              String   @id @default(uuid())
  userId          String
  date            DateTime
  studyMinutes    Int      @default(0)
  articlesRead    Int      @default(0)
  sentencesRead   Int      @default(0)
  streakDays      Int      @default(0)
  goalAchieved    Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model UserPreference {
  id     String @id @default(uuid())
  userId String
  key    String
  value  String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, key])
}

model StudySession {
  id            String    @id @default(uuid())
  userId        String
  startedAt     DateTime  @default(now())
  endedAt       DateTime?
  duration      Int?
  articlesRead  Int       @default(0)
  sentencesRead Int       @default(0)
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([startedAt])
}

model BackgroundJob {
  id           String    @id @default(uuid())
  type         String
  status       String
  payload      Json?
  error        String?
  attempts     Int       @default(0)
  maxAttempts  Int       @default(3)
  scheduledFor DateTime
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([type, status])
  @@index([scheduledFor])
}

model CacheEntry {
  id           String   @id @default(uuid())
  key          String   @unique
  type         String
  size         Int
  hits         Int      @default(0)
  lastAccessed DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  @@index([type])
  @@index([expiresAt])
}

model Cache {
  id         String   @id @default(uuid())
  key        String   @unique
  value      Json
  expires_at DateTime
  updated_at DateTime @updatedAt

  @@index([expires_at])
  @@map("cache")
}

model UserKeyword {
  id        String   @id @default(uuid())
  userId    String
  keyword   String
  weight    Float    @default(1.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, keyword])
  @@index([keyword])
}

model UserRssFeed {
  id        String   @id @default(uuid())
  userId    String
  name      String
  url       String
  category  String?
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, url])
}

model PerformanceReport {
  id               String   @id @default(uuid())
  sessionId        String
  userId           String?
  url              String
  userAgent        String
  webVitals        Json
  voiceMetrics     Json
  apiMetrics       Json
  voiceAvgMetrics  Json
  connectionType   String?
  timestamp        DateTime
  createdAt        DateTime @default(now())
  user             User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([userId])
  @@index([timestamp])
  @@index([url])
}

model AnalyticsEvent {
  id         String   @id @default(uuid())
  eventId    String   @unique
  type       String
  category   String
  action     String
  label      String?
  value      Float?
  metadata   Json
  timestamp  DateTime
  sessionId  String
  userId     String?
  url        String
  referrer   String?
  createdAt  DateTime @default(now())
  session    AnalyticsSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([userId])
  @@index([type])
  @@index([category])
  @@index([timestamp])
}

model AnalyticsSession {
  id         String   @id @default(uuid())
  userId     String?
  deviceId   String
  startTime  DateTime
  endTime    DateTime?
  duration   Int?
  pageViews  Int      @default(0)
  events     Int      @default(0)
  bounced    Boolean  @default(true)
  deviceInfo Json
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  analyticsEvents AnalyticsEvent[]

  @@index([userId])
  @@index([deviceId])
  @@index([startTime])
}

model NewsSearch {
  id          String   @id @default(uuid())
  userId      String
  transcript  String
  keywords    String[]
  resultCount Int
  selectedId  String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}
